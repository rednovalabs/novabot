{
  "author": {
    "name": "Ian Young",
    "email": "ian.greenleaf@gmail.com"
  },
  "name": "githubot",
  "description": "Hubot-compatible Github API wrapper for Node.js",
  "version": "0.5.0",
  "homepage": "https://github.com/iangreenleaf/githubot",
  "repository": {
    "type": "git",
    "url": "git@github.com:iangreenleaf/githubot.git"
  },
  "main": "./githubot",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {
    "scoped-http-client": ">= 0.9.8",
    "async": "0.2.x"
  },
  "devDependencies": {
    "mocha": "1.x",
    "coffee-script": "1.1.3",
    "nock": ">= 0.27.1"
  },
  "readme": "# A Hubot-compatible Github API wrapper for Node.js #\n\n[![Build Status]](http://travis-ci.org/iangreenleaf/githubot)\n\n## Install ##\n\n    npm install githubot\n\n## Require ##\n\nUse it in your Hubot script:\n\n```coffeescript\nmodule.exports = (robot) ->\n  github = require('githubot')(robot)\n```\n\nOr use it on its own:\n\n```coffeescript\ngithub = require('githubot')\n```\n\nYou can pass additional [options](#options) to the constructor if needed.\n\n## Use ##\n\nMake any call to the Github v3 API, get the parsed JSON response:\n\n```coffeescript\ngithub.get \"https://api.github.com/users/iangreenleaf/gists\", (gists) ->\n  console.log gists[0].description\n\ngithub.get \"users/foo/repos\", {type: \"owner\"}, (repos) ->\n  console.log repos[0].url\n\ndata = { description: \"A test gist\", public: true, files: { \"abc.txt\": { content: \"abcdefg\" } } }\ngithub.post \"gists\", data, (gist) ->\n  console.log gist.url\n\ngithub.patch \"repos/my/repo/issues/11\", {status: \"closed\"}, (issue) ->\n  console.log issue.html_url\n```\n\n## Authentication ##\n\nIf `process.env.HUBOT_GITHUB_TOKEN` is present, you're automatically authenticated. Sweet!\n\n### Acquire a token ###\n\nIf you don't have a token yet, run this:\n\n    curl -i https://api.github.com/authorizations -d '{\"scopes\":[\"repo\"]}' -u \"yourusername\"\n\nEnter your Github password when prompted. When you get a response, look for the \"token\" value.\n\n## Handling errors ##\n\nGitHubot will log errors automatically if it has a logger. Used with Hubot, these will go to the Hubot logger.\n\nIf your script would like to catch errors as well, define an extra callback:\n\n```coffeescript\ngithub.handleErrors (response) ->\n  console.log \"Oh no! #{response.statusCode}!\"\n```\n\nThe callback takes a `response` argument with the following keys:\n\n* `error`: The error message.\n* `statusCode`: The status code of the API response, if present.\n* `body`: The body of the API response, if present.\n\n## Helpful Hubot ##\n\nIf `process.env.HUBOT_GITHUB_USER` is present, we can help you guess a repo's full name:\n\n```coffeescript\ngithub.qualified_repo \"githubot\" # => \"iangreenleaf/githubot\"\n```\n\nThis will happen with the bespoke methods as well:\n\n```coffeescript\ngh.branches \"githubot\", (branches) ->\n```\n\n## Options ##\n\n### Passing options ###\n\nOptions may be passed to githubot in three different ways,\nin increasing order of precedence:\n\n1. Through shell environment variables.\n2. Through the constructor:\n\n   ```coffeescript\n   github = require('githubot')(robot, apiVersion: 'preview')\n   ```\n3. Using `withOptions`, which lets you pass options to only some requests:\n\n   ```coffeescript\n   github = require('githubot')(robot)\n   preview = github.withOptions(apiVersion: 'preview')\n   # Uses preview API\n   preview.get '/preview/feature', -> # ...\n   # Uses regular API\n   github.get '/regular/feature', -> # ...\n   ```\n\n### Available options ###\n\n* `token`/`process.env.HUBOT_GITHUB_TOKEN`:\n  GitHub API token. Required to perform authenticated actions.\n\n* `apiVersion`/`process.env.HUBOT_GITHUB_API_VERSION`:\n  [Version of the API](http://developer.github.com/v3/versions/)\n  to access. Defaults to 'beta'.\n\n* `defaultUser`/`process.env.HUBOT_GITHUB_USER`:\n  Default GitHub username to use if one is not given.\n\n* `apiRoot`/`process.env.HUBOT_GITHUB_API`:\n  The base API URL. This is useful for Enterprise Github installations.\n\n  For example, `HUBOT_GITHUB_API='https://myprivate.github.int'`\n\n* `concurrentRequests`/`process.env.HUBOT_CONCURRENT_REQUESTS`:\n  Limits the allowed number of concurrent requests to the GitHub API. Defaults to 20.\n\n## Bespoke API access ##\n\nMostly a work in progress, but here's a taste of what I have in mind:\n\n### List branches ###\n\n```coffeescript\ngh.branches \"foo/bar\", (branches) ->\n  console.log branches[0].name\n```\n\n### Create a branch ###\n\n```coffeescript\n# Branch from master\ngh.branches( \"foo/bar\" ).create \"my_radical_feature\", (branch) ->\n  console.log branch.sha\n\n# Branch from another branch\ngh.branches( \"foo/bar\" ).create \"even_more_radical\", from: \"my_radical_feature\", (branch) ->\n  console.log branch.sha\n```\n\n### Merge a branch ###\n\n```coffeescript\n# Merge a branch into master\ngh.branches( \"foo/bar\" ).merge \"my_radical_feature\", (mergeCommit) ->\n  console.log mergeCommit.message\n\n# Merge a branch into a different target\ngh.branches( \"foo/bar\" ).merge \"my_radical_feature\", into: \"hotfixes\", (mergeCommit) ->\n  console.log mergeCommit.message\n\n# `base` is an alias for `into`\ngh.branches( \"foo/bar\" ).merge \"my_radical_feature\", base: \"hotfixes\", (mergeCommit) ->\n  console.log mergeCommit.message\n\n# Provide your own commit message\ngh.branches( \"foo/bar\" ).merge \"my_radical_feature\", message: \"Merge my radical feature!\", (mergeCommit) ->\n  console.log mergeCommit.sha\n```\n\n### Delete a branch ###\n\n```coffeescript\ngh.branches( \"foo/bar\" ).delete \"my_radical_feature\", ->\n  console.log \"Deleted my branch!\"\n```\n\n## Contributing ##\n\nInstall the dependencies:\n\n    npm install\n\nRun the tests:\n\n    make test\n    make test-all # Runs additional slower \"integration\" style tests, generally not necessary\n\n**Pull requests encouraged!**\n\nI'm vastly more likely to merge code that comes with tests. If you're confused by the testing process,\nask and I can probably point you in the right direction.\n\n## Thanks ##\n\n[These lovely people have contributed to githubot](https://github.com/iangreenleaf/githubot/contributors).\n\n\n\n\n[Build Status]: https://travis-ci.org/iangreenleaf/githubot.png?branch=master\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/iangreenleaf/githubot/issues"
  },
  "_id": "githubot@0.5.0",
  "dist": {
    "shasum": "7837441901873474efce42b7218f392c5ae93c8e"
  },
  "_from": "githubot@0.5.0",
  "_resolved": "https://registry.npmjs.org/githubot/-/githubot-0.5.0.tgz"
}
